{"version":3,"sources":["duplicate-requests-filter.js"],"names":["angular","hash","i","n","str","h","getRequestIdentifier","config","$duplicateRequestsFilter","data","pendingRequests","forEach","identifier","$http","$delegate","defaults","window"],"mappings":"uOAKAA,0JAyBWC,EAAIC,OACPC,EAAIC,EACJC,EAAWD,EAAKC,UACRA,IAARA,+DAQJ,OAASC,IAAAA,WAMLF,EAAsBG,wBAQ1B,OANEA,EAAON,QAAKG,WAAAA,QAAAA,EAAAA,2FAMLI,EAAAA,+DAcKF,EAAAC,YAGEA,sCAGZE,KAAOC,kHAgBRC,EAAQC,IAnEX,IAAAF,KACEG,EAAQC,2CAqEVN,MAAyBO,mBAAzBP,EAAAA,4CAODQ,EArGHD,SAAAF,EAAAE","file":"angular-duplicate-requests-filter.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('DuplicateRequestsFilter.Decorator', [])\n\n/**\n * Config\n */\n.config(function($provide) {\n\n  /**\n   * Decorator for the $http service\n   */\n  $provide.decorator('$http', function($delegate, $q) {\n\n    //Pending requests and local $http let for natural reference\n    let pendingRequests = {};\n    let $http = $delegate;\n\n    /**\n     * Hash generator\n     */\n    function hash(str) {\n      let h = 0;\n      let strlen = str.length;\n      if (strlen === 0) {\n        return h;\n      }\n      for (let i = 0, n; i < strlen; ++i) {\n        n = str.charCodeAt(i);\n        h = ((h << 5) - h) + n;\n        h = h & h;\n      }\n      return h >>> 0;\n    }\n\n    /**\n     * Helper to generate a unique identifier for a request\n     */\n    function getRequestIdentifier(config) {\n      let str = config.method + config.url;\n      if (config.params && typeof config.params === 'object') {\n        str += angular.toJson(config.params);\n      }\n      if (config.data && typeof config.data === 'object') {\n        str += angular.toJson(config.data);\n      }\n      return hash(str);\n    }\n\n    /**\n     * Modified $http service\n     */\n    function $duplicateRequestsFilter(config) {\n\n      //Ignore for this request?\n      if (config.ignoreDuplicateRequest) {\n        return $http(config);\n      }\n\n      //Get unique request identifier\n      let identifier = getRequestIdentifier(config);\n\n      //Check if such a request is pending already\n      if (pendingRequests[identifier]) {\n        if (config.rejectDuplicateRequest) {\n          return $q.reject({\n            data: '',\n            headers: {},\n            status: config.rejectDuplicateStatusCode || 400,\n            config: config,\n          });\n        }\n        return pendingRequests[identifier];\n      }\n\n      //Create promise using $http and make sure it's reset when resolved\n      pendingRequests[identifier] = $http(config).finally(() => {\n        delete pendingRequests[identifier];\n      });\n\n      //Return promise\n      return pendingRequests[identifier];\n    }\n\n    //Map rest of methods\n    Object\n      .keys($http)\n      .filter(key => (typeof $http[key] === 'function'))\n      .forEach(key => $duplicateRequestsFilter[key] = $http[key]);\n\n    //Map defaults\n    $duplicateRequestsFilter.defaults = $http.defaults;\n\n    //Return it\n    return $duplicateRequestsFilter;\n  });\n});\n\n})(window, window.angular);\n"]}